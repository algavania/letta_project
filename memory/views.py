# views.py
import json
from django.views.decorators.csrf import csrf_exempt
from rest_framework.views import APIView
from rest_framework import status
from letta import ChatMemory, EmbeddingConfig, LLMConfig, create_client
from .response_formatter import format_response

# Initialize Letta client
LETA_API_URL = 'http://localhost:8283'
client = create_client()

# set automatic defaults for LLM/embedding config
client.set_default_embedding_config(EmbeddingConfig.default_config(provider="openai"))
client.set_default_llm_config(LLMConfig.default_config(model_name="gpt-4"))


class MemoryView(APIView):
    def get(self, request):
        try:
            user_id = request.GET.get('user_id')
            memory = client.get_core_memory(agent_id=str(user_id))
            return format_response(
                success=True,
                message=memory,
            )
        except Exception as e:
            return format_response(
                success=False,
                message=str(e),
                data=None,
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

    def post(self, request):
        try:
            agent_id = request.data.get('agent_id')
            message = request.data.get('message')
            agent = get_agent(agent_id)
            client.send_message(
                agent_id=agent.id,
                role="user",
                message=message
            )
            return format_response(
                success=True,
                message="Memory updated successfully",
            )
        except Exception as e:
            return format_response(
                success=False,
                message=str(e),
                data=None,
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

    def delete(self, request):
        try:
            user_id = request.GET.get('user_id')
            client.delete_agent(agent_id=str(user_id))
            return format_response(
                success=True,
                message="Memory deleted successfully",
            )
        except Exception as e:
            return format_response(
                success=False,
                message=str(e),
                data=None,
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )


def get_agent(user_id):
    agent_id = client.get_agent_id(agent_name=str(user_id))
    if (agent_id != None):
        return client.get_agent(agent_id=agent_id)
    agent_state = client.create_agent(
        # agent's name (unique per-user, autogenerated if not provided)
        name=str(user_id),
        # in-context memory representation with human/persona blocks
        memory=ChatMemory(
            human=str(user_id),
            persona="sam_pov"
        ),
        # LLM model & endpoint configuration
        llm_config=LLMConfig(
            model="gpt-4",
            model_endpoint_type="openai",
            model_endpoint="https://api.openai.com/v1",
            context_window=8000,  # set to <= max context window
        ),
        # embedding model & endpoint configuration (cannot be changed)
        embedding_config=EmbeddingConfig(
            embedding_endpoint_type="openai",
            embedding_endpoint="https://api.openai.com/v1",
            embedding_model="text-embedding-ada-002",
            embedding_dim=1536,
            embedding_chunk_size=300,
        ),
        tools=[],
    )
    return agent_state
